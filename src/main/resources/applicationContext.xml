<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">



    <!-- Spring希望管理所有的业务逻辑组件，不包含controller -->
    <context:component-scan base-package="zhang.spring">
        <!-- 制定扫包规则，不扫描 @Controller 注解修饰的 Java 类，其它还是要扫描 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

       <!-- &lt;!&ndash; 引入数据库的配置文件 &ndash;&gt;-->
       <!-- <context:property-placeholder location="classpath:dbconfig.properties" />-->

       <!-- &lt;!&ndash; Spring用来控制业务逻辑。数据源、事务控制、aop &ndash;&gt;-->
       <!-- <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
       <!--     <property name="driverClassName" value="${driverClassName}"></property>-->
       <!--     <property name="url" value="${url}"></property>-->
       <!--     <property name="username" value="${username}"></property>-->
       <!--     <property name="password" value="${password}"></property>-->
       <!-- </bean>-->
       <!-- &lt;!&ndash;-->
       <!-- 整合mybatis-->
       <!--     目的：1、spring管理所有组件。mapper的实现类。-->
       <!--             service==>Dao   @Autowired:自动注入mapper；-->
       <!--           2、spring用来管理事务，spring声明式事务-->
       <!-- &ndash;&gt;-->
       <!-- &lt;!&ndash; spring事务管理 &ndash;&gt;-->
       <!-- <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
       <!--     <property name="dataSource" ref="dataSource"></property>-->
       <!-- </bean>-->

       <!-- &lt;!&ndash; 开启基于注解的事务 &ndash;&gt;-->
       <!-- <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>-->

       <!-- &lt;!&ndash;创建出SqlSessionFactory对象  &ndash;&gt;-->
       <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
       <!--     <property name="dataSource" ref="dataSource"></property>-->
       <!--     &lt;!&ndash; configLocation指定全局配置文件的位置 &ndash;&gt;-->
       <!--     <property name="configLocation" value="classpath:mybatis-config.xml"></property>-->
       <!--     &lt;!&ndash;mapperLocations: 指定mapper文件的位置&ndash;&gt;-->
       <!--     <property name="mapperLocations" value="classpath:mapper/*.xml"></property>-->
       <!-- </bean>-->

       <!-- &lt;!&ndash;配置一个可以进行批量执行的sqlSession  &ndash;&gt;-->
       <!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">-->
       <!--     <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>-->
       <!--     <constructor-arg name="executorType" value="BATCH"></constructor-arg>-->
       <!-- </bean>-->

       <!-- &lt;!&ndash; 扫描所有的mapper接口的实现，让这些mapper能够自动注入；base-package：指定mapper接口的包名 &ndash;&gt;-->
       <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
       <!--     <property name="basePackage" value="zhang.spring.mapper"></property>-->
       <!--     <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
       <!--</bean>-->
</beans>